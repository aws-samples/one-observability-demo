name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
          - 8000:8000
        env:
          SERVICES: dynamodb,ssm
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
        options: >-
          --health-cmd "curl -f http://localhost:4566/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: PetAdoptions/petfood-rs

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Check code formatting
      run: cargo fmt --check
      working-directory: PetAdoptions/petfood-rs

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      working-directory: PetAdoptions/petfood-rs

    - name: Build project
      run: cargo build --verbose
      working-directory: PetAdoptions/petfood-rs

    - name: Run unit tests
      run: cargo test --lib --verbose
      working-directory: PetAdoptions/petfood-rs

    - name: Run property-based tests
      run: cargo test --test property_tests --verbose
      working-directory: PetAdoptions/petfood-rs

    - name: Wait for LocalStack to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4566/health; do sleep 2; done'

    - name: Run integration tests
      run: cargo test --test integration_tests --verbose
      working-directory: PetAdoptions/petfood-rs
      env:
        DYNAMODB_ENDPOINT: http://localhost:8000
        SSM_ENDPOINT: http://localhost:4566
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1

    - name: Run end-to-end tests
      run: cargo test --test e2e_tests --verbose
      working-directory: PetAdoptions/petfood-rs
      env:
        DYNAMODB_ENDPOINT: http://localhost:8000
        SSM_ENDPOINT: http://localhost:4566
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1

    - name: Generate test coverage
      run: |
        cargo tarpaulin --out xml --output-dir target/coverage --verbose
      working-directory: PetAdoptions/petfood-rs
      env:
        DYNAMODB_ENDPOINT: http://localhost:8000
        SSM_ENDPOINT: http://localhost:4566
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: PetAdoptions/petfood-rs/target/coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
          - 8000:8000
        env:
          SERVICES: dynamodb,ssm
          DEBUG: 1
        options: >-
          --health-cmd "curl -f http://localhost:4566/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: PetAdoptions/petfood-rs

    - name: Wait for LocalStack to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4566/health; do sleep 2; done'

    - name: Run benchmarks
      run: |
        cargo bench --bench food_search -- --output-format json | tee benchmark_results.json
      working-directory: PetAdoptions/petfood-rs
      env:
        DYNAMODB_ENDPOINT: http://localhost:8000
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: PetAdoptions/petfood-rs/benchmark_results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: PetAdoptions/petfood-rs

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit
      working-directory: PetAdoptions/petfood-rs

    - name: Run cargo deny
      uses: EmbarkStudios/cargo-deny-action@v1
      with:
        manifest-path: PetAdoptions/petfood-rs/Cargo.toml

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: PetAdoptions/petfood-rs
        file: PetAdoptions/petfood-rs/Dockerfile
        push: false
        tags: petfood-rs:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm petfood-rs:test --version

    - name: Run container tests
      run: |
        docker-compose -f PetAdoptions/petfood-rs/docker-compose.test.yml up --build --abort-on-container-exit
        docker-compose -f PetAdoptions/petfood-rs/docker-compose.test.yml down

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: PetAdoptions/petfood-rs

    - name: Build release binary
      run: cargo build --release
      working-directory: PetAdoptions/petfood-rs

    - name: Create release archive
      run: |
        cd PetAdoptions/petfood-rs/target/release
        tar -czf petfood-rs-linux-x86_64.tar.gz petfood-rs
        
    - name: Generate changelog
      id: changelog
      run: |
        echo "## Changes" > CHANGELOG.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> CHANGELOG.md || echo "- Initial release" >> CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: PetAdoptions/petfood-rs/target/release/petfood-rs-linux-x86_64.tar.gz
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}