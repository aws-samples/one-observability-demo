var synthetics = require('Synthetics');
const log = require('SyntheticsLogger');

const recordedScript = async function () {
    let page = await synthetics.getPage();

    const navigationPromise = page.waitForNavigation();

    // Try to read from SSM, fallback to environment variable
    let petsiteUrl = process.env.PETSITE_URL;
    const ssmParameterName = process.env.PETSITE_URL_PARAMETER_NAME || '/petstore/petsiteurl';

    // Attempt to read from SSM
    try {
        const { SSMClient, GetParameterCommand } = require('@aws-sdk/client-ssm');
        const ssm = new SSMClient({});
        const command = new GetParameterCommand({
            Name: ssmParameterName,
            WithDecryption: false,
        });
        const parameter = await ssm.send(command);

        if (parameter.Parameter && parameter.Parameter.Value) {
            petsiteUrl = parameter.Parameter.Value;
            log.info('Successfully retrieved petsite URL from SSM: ' + petsiteUrl);
        }
    } catch (error) {
        log.info('SSM access failed, using environment variable URL: ' + petsiteUrl);
    }

    log.info('Starting canary execution with URL: ' + petsiteUrl);
    log.info('SSM Parameter to monitor: ' + ssmParameterName);

    try {
        await synthetics.executeStep('Goto_0', async function () {
            await page.goto(petsiteUrl + '/?userId=user1930', { waitUntil: 'domcontentloaded', timeout: 60000 });
        });

        await page.setViewport({ width: 1463, height: 863 });

        await synthetics.executeStep('Click_1', async function () {
            await page.waitForSelector('.pet-header #performhousekeeping');
            await page.click('.pet-header #performhousekeeping');
        });

        await navigationPromise;

        log.info('Canary execution completed successfully');
    } catch (error) {
        log.error('Canary execution failed: ' + (error instanceof Error ? error.message : String(error)));
        throw error;
    }
};
exports.handler = async () => {
    return await recordedScript();
};
