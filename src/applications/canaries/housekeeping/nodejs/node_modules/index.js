var synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const AWSXRay = require('aws-xray-sdk-core');

const recordedScript = async function () {
    return await AWSXRay.captureAsyncFunc('canary-execution', async (subsegment) => {
        let page = await synthetics.getPage();

    const navigationPromise = page.waitForNavigation();

    // Try to read from SSM, fallback to environment variable
    let petsiteUrl = process.env.PETSITE_URL;
    const ssmParameterName = process.env.PETSITE_URL_PARAMETER_NAME || '/petstore/petsiteurl';

    // Attempt to read from SSM
    try {
        const { SSMClient, GetParameterCommand } = require('@aws-sdk/client-ssm');
        const ssm = AWSXRay.captureAWSv3Client(new SSMClient({}));
        const command = new GetParameterCommand({
            Name: ssmParameterName,
            WithDecryption: false,
        });
        const parameter = await ssm.send(command);

        if (parameter.Parameter && parameter.Parameter.Value) {
            petsiteUrl = parameter.Parameter.Value;
            log.info('Successfully retrieved petsite URL from SSM: ' + petsiteUrl);
        }
    } catch (error) {
        log.info('SSM access failed, using environment variable URL: ' + petsiteUrl);
    }

    log.info('Starting housekeeping canary execution with URL: ' + petsiteUrl);
    log.info('SSM Parameter to monitor: ' + ssmParameterName);

    try {
        await synthetics.executeStep('Goto_0', async function () {
            await page.goto(petsiteUrl + '/?userId=housekeeping1930', {
                waitUntil: 'domcontentloaded',
                timeout: 60000,
            });
        });

        await page.setViewport({ width: 1463, height: 863 });

        // Wait for page to load completely
        await page.waitForSelector('.pet-header', { timeout: 10000 });

        await synthetics.executeStep('Click_Housekeeping', async function () {
            await page.waitForSelector('.pet-header #performhousekeeping');
            await page.click('.pet-header #performhousekeeping');
        });

        await navigationPromise;

        // Wait for housekeeping to complete
        await synthetics.takeScreenshot('housekeeping_completed', 'loaded');
        await new Promise(resolve => setTimeout(resolve, 2000));

        log.info('Housekeeping canary execution completed successfully');
        if (subsegment) subsegment.close();
    } catch (error) {
        log.error('Housekeeping canary execution failed: ' + error.message);
        if (subsegment) {
            subsegment.addError(error);
            subsegment.close(error);
        }
        throw error;
    }
    });
};
exports.handler = async () => {
    return await recordedScript();
};
