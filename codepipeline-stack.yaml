Description: One Observability Workshop Pipeline
Parameters:

  GithubBranch:
    Description: "Source branch to use for CodePipeline deployment"
    Type: String
    Default: main

Resources:

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess        

  CodeDeployRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
          - Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:Abort*
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: CodeDeployRoleDefaultPolicy
      Roles:
        - Ref: CodeDeployRole
    

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: "CDKPipelineInitialDeployment"
      Description: "This Project runs the initial deployment of the CDK Self-mutating pipeline used for the One Observability Workshop IaC"
      Artifacts:
        Type: NO_ARTIFACTS
      TimeoutInMinutes: 90
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: GITHUB_BRANCH
            Type: PLAINTEXT
            Value: !Ref GithubBranch
          - Name: SOURCE_BUCKET_NAME
            Type: PLAINTEXT
            Value: !Ref PipelineSourceBucket
      ServiceRole:
        !GetAtt CodeDeployRole.Arn
      Source:
        Type: S3
        Location: !Sub ${PipelineSourceBucket}/Repository.zip
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &
                - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
                - npm install aws-cdk -g
                - CDK_STACK=$(aws cloudformation list-stacks --query 'StackSummaries[?(StackName==`CDKToolkit` && StackStatus==`CREATE_COMPLETE`)].StackId' --output text)
            build:
              commands:
                - cd one-observability-demo-${GITHUB_BRANCH}/PetAdoptions/cdk/pet_stack
                - npm install
                - if [ -z "$CDK_STACK" ] ; then echo "cdk bootstrap needed" ; else echo "Already bootstrapped" ; fi
                - cdk synth OneObservabilityWorkshopPipeline
                - cdk deploy OneObservabilityWorkshopPipeline --require-approval never
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: "/codebuild/CDKPipelineInitialDeployment"

  PipelineSourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
    DeletionPolicy: Retain

  SourceCodeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com                                    
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SourceCodeLambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:Abort*
            Effect: Allow
            Resource: "*"

        Version: "2012-10-17"
      PolicyName: SourceCodeLambdaRolePolicy
      Roles:
        - Ref: SourceCodeLambdaRole   

  SourceCodeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt SourceCodeLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import cfnresponse
          import io
          import zipfile
          import urllib3

          def handler(event, context):
          # Upload the file
            s3_client = boto3.client('s3')
            responseData = {}
            responseResult = cfnresponse.FAILED
            try:
              print('## ENVIRONMENT VARIABLES')
              print(os.environ)
              print('## EVENT')
              print(event)              
              destinationBucket = os.environ['DESTINATION_BUCKET']
              zip_buffer = io.BytesIO()
              with zipfile.ZipFile(zip_buffer, "a", zipfile.ZIP_DEFLATED, False) as zipper:
                  file_name = "DUMMY.txt"
                  infile_content = "Dummy file used to trigger CodeBuild"
                  zipper.writestr(file_name, infile_content)
          
              s3_client.put_object(Bucket=destinationBucket, Key='SourceCode.zip', Body=zip_buffer.getvalue())
              branch = os.environ['GITHUB_BRANCH']
              url = f'https://github.com/aws-samples/one-observability-demo/archive/refs/heads/{branch}.zip'
              http = urllib3.PoolManager()

              repozip = http.request('GET', url, preload_content=False)
              if repozip.status == 200:
                s3_client.put_object(Bucket=destinationBucket, Key='Repository.zip', Body=repozip.data)
                responseResult = cfnresponse.SUCCESS
              else:
                raise Exception(f'Failed to download repository from {url}')
            except Exception as e:
              responseData['Data'] = str(e)

            cfnresponse.send(event, context, responseResult, responseData, "CustomResourcePhysicalID")            
            return      
      Runtime: python3.12
      Timeout: 900
      Environment:
        Variables:
          DESTINATION_BUCKET: !Ref PipelineSourceBucket
          GITHUB_BRANCH: !Ref GithubBranch
  PushCodeCustom:
    Type: Custom::Buildspec
    Properties:
      ServiceToken: !GetAtt SourceCodeLambdaFunction.Arn
